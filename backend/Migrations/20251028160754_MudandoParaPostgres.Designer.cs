// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using pontoFacilApi.source.Infraestructure.Data;

#nullable disable

namespace pontoFacilApi.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20251028160754_MudandoParaPostgres")]
    partial class MudandoParaPostgres
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Cargo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("SetorId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("SetorId");

                    b.ToTable("Cargos");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Nome = "Estagiário",
                            SetorId = 1
                        },
                        new
                        {
                            Id = 2,
                            Nome = "Assistente Administrativo",
                            SetorId = 1
                        },
                        new
                        {
                            Id = 3,
                            Nome = "Analista Administrativo",
                            SetorId = 1
                        },
                        new
                        {
                            Id = 4,
                            Nome = "Coordenador Administrativo",
                            SetorId = 1
                        },
                        new
                        {
                            Id = 5,
                            Nome = "Assistente Financeiro",
                            SetorId = 2
                        },
                        new
                        {
                            Id = 6,
                            Nome = "Analista Financeiro",
                            SetorId = 2
                        },
                        new
                        {
                            Id = 7,
                            Nome = "Gerente Financeiro",
                            SetorId = 2
                        },
                        new
                        {
                            Id = 8,
                            Nome = "Analista de RH",
                            SetorId = 3
                        },
                        new
                        {
                            Id = 9,
                            Nome = "Coordenador de RH",
                            SetorId = 3
                        },
                        new
                        {
                            Id = 10,
                            Nome = "Recrutador",
                            SetorId = 3
                        },
                        new
                        {
                            Id = 11,
                            Nome = "Vendedor",
                            SetorId = 4
                        },
                        new
                        {
                            Id = 12,
                            Nome = "Representante Comercial",
                            SetorId = 4
                        },
                        new
                        {
                            Id = 13,
                            Nome = "Gerente Comercial",
                            SetorId = 4
                        },
                        new
                        {
                            Id = 14,
                            Nome = "Desenvolvedor",
                            SetorId = 5
                        },
                        new
                        {
                            Id = 15,
                            Nome = "Analista de Sistemas",
                            SetorId = 5
                        },
                        new
                        {
                            Id = 16,
                            Nome = "Administrador de Redes",
                            SetorId = 5
                        },
                        new
                        {
                            Id = 17,
                            Nome = "Coordenador de TI",
                            SetorId = 5
                        },
                        new
                        {
                            Id = 18,
                            Nome = "Auxiliar de Logística",
                            SetorId = 6
                        },
                        new
                        {
                            Id = 19,
                            Nome = "Supervisor de Logística",
                            SetorId = 6
                        },
                        new
                        {
                            Id = 20,
                            Nome = "Advogado",
                            SetorId = 7
                        },
                        new
                        {
                            Id = 21,
                            Nome = "Assistente Jurídico",
                            SetorId = 7
                        },
                        new
                        {
                            Id = 22,
                            Nome = "Analista de Marketing",
                            SetorId = 8
                        },
                        new
                        {
                            Id = 23,
                            Nome = "Designer Gráfico",
                            SetorId = 8
                        },
                        new
                        {
                            Id = 24,
                            Nome = "Social Media",
                            SetorId = 8
                        },
                        new
                        {
                            Id = 25,
                            Nome = "Operador de Máquina",
                            SetorId = 9
                        },
                        new
                        {
                            Id = 26,
                            Nome = "Supervisor de Produção",
                            SetorId = 9
                        },
                        new
                        {
                            Id = 27,
                            Nome = "Atendente",
                            SetorId = 10
                        },
                        new
                        {
                            Id = 28,
                            Nome = "Supervisor de Atendimento",
                            SetorId = 10
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .HasColumnType("text");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Setor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Setores");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Nome = "Administrativo"
                        },
                        new
                        {
                            Id = 2,
                            Nome = "Financeiro"
                        },
                        new
                        {
                            Id = 3,
                            Nome = "Recursos Humanos"
                        },
                        new
                        {
                            Id = 4,
                            Nome = "Comercial"
                        },
                        new
                        {
                            Id = 5,
                            Nome = "Tecnologia da Informação"
                        },
                        new
                        {
                            Id = 6,
                            Nome = "Logística"
                        },
                        new
                        {
                            Id = 7,
                            Nome = "Jurídico"
                        },
                        new
                        {
                            Id = 8,
                            Nome = "Marketing"
                        },
                        new
                        {
                            Id = 9,
                            Nome = "Produção"
                        },
                        new
                        {
                            Id = 10,
                            Nome = "Atendimento ao Cliente"
                        });
                });

            modelBuilder.Entity("pontoFacilApi.source.Domain.Models.Colaborador", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("CPF")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("CargoId")
                        .HasColumnType("integer");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("dataCriacao")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("CargoId");

                    b.ToTable("Colaboradores");
                });

            modelBuilder.Entity("pontoFacilApi.source.Domain.Models.Usuario", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Cargo", b =>
                {
                    b.HasOne("Setor", "Setor")
                        .WithMany("Cargos")
                        .HasForeignKey("SetorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Setor");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("pontoFacilApi.source.Domain.Models.Usuario", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("pontoFacilApi.source.Domain.Models.Usuario", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("pontoFacilApi.source.Domain.Models.Usuario", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("pontoFacilApi.source.Domain.Models.Usuario", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("pontoFacilApi.source.Domain.Models.Colaborador", b =>
                {
                    b.HasOne("Cargo", "Cargo")
                        .WithMany("Colaboradores")
                        .HasForeignKey("CargoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cargo");
                });

            modelBuilder.Entity("Cargo", b =>
                {
                    b.Navigation("Colaboradores");
                });

            modelBuilder.Entity("Setor", b =>
                {
                    b.Navigation("Cargos");
                });
#pragma warning restore 612, 618
        }
    }
}
